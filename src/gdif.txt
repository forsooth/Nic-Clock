[1mdiff --git a/src/sanddial/__init__.py b/src/sanddial/__init__.py[m
[1mindex f2be4f0..8abc38c 100644[m
[1m--- a/src/sanddial/__init__.py[m
[1m+++ b/src/sanddial/__init__.py[m
[36m@@ -5,6 +5,7 @@[m [moff control of the program to the other modules.[m
 import signal[m
 import sys[m
 import datetime[m
[32m+[m[32mimport time[m
 from sanddial import err[m
 from sanddial import imgproc[m
 from sanddial import camera[m
[36m@@ -61,11 +62,11 @@[m [mclass SandDial():[m
         self.minute = self.init_t.minute + round(self.init_t.second / 100)[m
         self.hour = self.init_t.hour[m
 [m
[31m-        self.print_time()[m
 [m
[31m-    def print_time(self):[m
[31m-        """Output the current time to the terminal."""[m
[31m-        print(str(self.hour) + ':' + str(self.minute))[m
[32m+[m[32m    def time_string(self):[m
[32m+[m[32m        if self.minute < 10:[m
[32m+[m[32m            return str(self.hour) + ":0" + str(self.minute)[m
[32m+[m[32m        return str(self.hour) + ":" + str(self.minute)[m
 [m
     def run(self):[m
         """Loop until the user quits with SIGINT, grabbing images from the[m
[36m@@ -81,13 +82,18 @@[m [mclass SandDial():[m
             # Load the image into the image processor[m
             self.processor.load_img(frame)[m
             # Determine whether the servo should turn for this frame[m
[31m-            should_turn = self.processor.analyze()[m
[32m+[m[32m            should_turn = self.processor.analyze(self.time_string())[m
 [m
             # When there is no sand left in the hourglass, we want to[m
             # make sure there really isn't any left by waiting for a couple[m
             # of images to corroborate the result[m
             if should_turn is True:[m
[32m+[m[32m                err.warn("Strike against current configuration detected: "[m
[32m+[m[32m                         + str(self.strikes))[m
                 self.strikes += 1[m
[32m+[m[32m            else:[m
[32m+[m	[32m        # If we do detect sand again, reset the strike counter[m
[32m+[m[32m                self.strikes = 0[m
 [m
             # If we are in fact certain that there isn't any sand, then we[m
             # want to change our timer.[m
[36m@@ -100,5 +106,4 @@[m [mclass SandDial():[m
                     self.hour += 1[m
                     if self.hour >= 24:[m
                         self.hour = 0[m
[31m-                self.print_time()[m
 [m
[1mdiff --git a/src/sanddial/camera.py b/src/sanddial/camera.py[m
[1mindex c52ee12..15acdf3 100644[m
[1m--- a/src/sanddial/camera.py[m
[1m+++ b/src/sanddial/camera.py[m
[36m@@ -30,7 +30,7 @@[m [mclass Camera():[m
         self.camera = picamera.PiCamera(resolution=(self.width, self.height))[m
 [m
         self.camera.iso = 100[m
[31m-[m
[32m+[m[32m        self.camera.zoom = (0.25, 0.25, 0.5, 0.5)[m
         # We wait five seconds before setting the white balance so that[m
         # the camera has time to auto-adjust.[m
         err.log("Initializing camera white balance â€” sleeping for 5 seconds.")[m
[1mdiff --git a/src/sanddial/imgproc.py b/src/sanddial/imgproc.py[m
[1mindex a6aef08..0c5f878 100644[m
[1m--- a/src/sanddial/imgproc.py[m
[1m+++ b/src/sanddial/imgproc.py[m
[36m@@ -130,7 +130,10 @@[m [mdef draw_bbox(img, dims, bbox):[m
     cv2.rectangle(overlay, (bbox.bbr, 0), (width, height), OVERLAY_COLOR, -1)[m
     cv2.rectangle(overlay, (0, bbox.bbb), (width, height), OVERLAY_COLOR, -1)[m
 [m
[31m-    cv2.addWeighted(overlay, 0.25, img, 0.75, 0, img)[m
[32m+[m[32m    cv2.addWeighted(overlay, 0.33, img, 0.66, 0, img)[m
[32m+[m[32m    cv2.rectangle(img, (bbox.bbl, bbox.bbt), (bbox.bbr, bbox.bbb), OVERLAY_COLOR, 2)[m
[32m+[m
[32m+[m[32m    return img[m
 [m
 [m
 def oob(lftx, rgtx, topy, boty, bbox):[m
[36m@@ -188,7 +191,7 @@[m [mdef find_objs(img, dilated, contours, dims, bbox):[m
     sand_p1 = dims[m
     sand_p2 = Point(0, 0)[m
 [m
[31m-    draw_bbox(img, dims, bbox)[m
[32m+[m[32m    img = draw_bbox(img, dims, bbox)[m
 [m
     for contour in contours:[m
         # If the area contained in the contour is too small[m
[36m@@ -227,24 +230,15 @@[m [mdef find_objs(img, dilated, contours, dims, bbox):[m
             cv2.line(img, (int((lftp.x + rgtp.x) / 2), topp.y),[m
                      (int((lftp.x + rgtp.x) / 2), botp.y), SUCCESS_COLOR, 5)[m
 [m
[31m-        cv2.circle(img, lftp, 25, SUCCESS_COLOR, 5)[m
[31m-        cv2.circle(img, rgtp, 25, SUCCESS_COLOR, 5)[m
[31m-        cv2.circle(img, topp, 25, SUCCESS_COLOR, 5)[m
[31m-        cv2.circle(img, botp, 25, SUCCESS_COLOR, 5)[m
[32m+[m[32m        cv2.circle(img, lftp, 5, SUCCESS_COLOR, 2)[m
[32m+[m[32m        cv2.circle(img, rgtp, 5, SUCCESS_COLOR, 2)[m
[32m+[m[32m        cv2.circle(img, topp, 5, SUCCESS_COLOR, 2)[m
[32m+[m[32m        cv2.circle(img, botp, 5, SUCCESS_COLOR, 2)[m
 [m
         cv2.drawContours(img, [box.astype("int")], -1, SUCCESS_COLOR, 2)[m
 [m
         cv2.drawContours(dilated, [box.astype("int")], -1, SUCCESS_COLOR, 2)[m
 [m
[31m-        # draw the object sizes on the image[m
[31m-        cv2.putText(img, "w: {:.1f}px".format(boxw),[m
[31m-                    (int(rgtp.x + 15), int(botp.y + 15)),[m
[31m-                    cv2.FONT_HERSHEY_SIMPLEX, 0.65, SUCCESS_COLOR, 2)[m
[31m-[m
[31m-        cv2.putText(img, "h: {:.1f}px".format(boxh),[m
[31m-                    (int(rgtp.x + 15), int(botp.y)),[m
[31m-                    cv2.FONT_HERSHEY_SIMPLEX, 0.65, SUCCESS_COLOR, 2)[m
[31m-[m
         cv2.putText(dilated, "w: {:.1f}px".format(boxw),[m
                     (int(rgtp.x + 15), int(botp.y + 15)),[m
                     cv2.FONT_HERSHEY_SIMPLEX, 0.65, SUCCESS_COLOR, 2)[m
[36m@@ -253,7 +247,7 @@[m [mdef find_objs(img, dilated, contours, dims, bbox):[m
                     (int(rgtp.x + 15), int(botp.y)),[m
                     cv2.FONT_HERSHEY_SIMPLEX, 0.65, SUCCESS_COLOR, 2)[m
 [m
[31m-    return img, dilated, sand_p2.x - sand_p1.x, sand_p2.y - sand_p1.y[m
[32m+[m[32m    return img, dilated, abs(sand_p2.x - sand_p1.x), abs(sand_p1.y - sand_p2.y)[m
 [m
 [m
 class ImageProcessor():[m
[36m@@ -286,23 +280,34 @@[m [mclass ImageProcessor():[m
         self.input_img = None[m
 [m
         # This plot holds a color image; its array is w*h*c[m
[31m-        plt.subplot2grid((1, 2), (0, 0))[m
[32m+[m[32m        plt.subplot2grid((1, 3), (0, 0))[m
         emptyim = np.empty((width * height * CHANNELS),[m
                            dtype=np.uint8).reshape((height, width, CHANNELS))[m
         self.leftimg = plt.imshow(emptyim.copy(), animated=True)[m
[32m+[m[32m        self.leftimg.axes.get_xaxis().set_visible(False)[m
[32m+[m[32m        self.leftimg.axes.get_yaxis().set_visible(False)[m
 [m
         # This plot holds a grayscale image; its array is w*h[m
[31m-        plt.subplot2grid((1, 2), (0, 1))[m
[32m+[m[32m        plt.subplot2grid((1, 3), (0, 1))[m
         emptyim = np.empty((width * height),[m
                            dtype=np.uint8).reshape((height, width))[m
         self.rightimg = plt.imshow(emptyim.copy(), animated=True)[m
[32m+[m[32m        self.rightimg.axes.get_xaxis().set_visible(False)[m
[32m+[m[32m        self.rightimg.axes.get_yaxis().set_visible(False)[m
[32m+[m
[32m+[m[32m        plt.subplot2grid((1, 3), (0, 2))[m
[32m+[m[32m        emptyim = np.empty((width * height * CHANNELS),[m
[32m+[m[32m                           dtype=np.uint8).reshape((height, width, CHANNELS))[m
[32m+[m[32m        self.timeimg = plt.imshow(emptyim.copy(), animated=True)[m
[32m+[m[32m        self.timeimg.axes.get_xaxis().set_visible(False)[m
[32m+[m[32m        self.timeimg.axes.get_yaxis().set_visible(False)[m
 [m
         self.sand_dims = Point(0, 0)[m
 [m
[31m-        bbt = int(height / 2 - 0.10 * height)[m
[31m-        bbb = int(height / 2 + 0.10 * height)[m
[31m-        bbl = int(width / 2 - 0.20 * width)[m
[31m-        bbr = int(width / 2 + 0.20 * width)[m
[32m+[m[32m        bbt = int(height / 2 - 0.20 * height)[m
[32m+[m[32m        bbb = int(height / 2 + 0.15 * height)[m
[32m+[m[32m        bbl = int(width / 2 - 0.10 * width)[m
[32m+[m[32m        bbr = int(width / 2 + 0.25 * width)[m
 [m
         # set bounding box for sand[m
         self.bbox = BoundingBox(bbt, bbb, bbl, bbr)[m
[36m@@ -317,7 +322,7 @@[m [mclass ImageProcessor():[m
         """[m
         self.input_img = img[m
 [m
[31m-    def analyze(self):[m
[32m+[m[32m    def analyze(self, timestr):[m
         """Perform a series of image processing operations on the most recently[m
         loaded image for the purpose of detecting the location of objects in[m
         a given range, in particular sand in an hourglass (though the module[m
[36m@@ -329,9 +334,8 @@[m [mclass ImageProcessor():[m
         """[m
 [m
         img = self.input_img[m
[31m-        cv2.imshow('ddd', img)[m
         # Upper and lower bounds for colors used in thresholding[m
[31m-        boundaries = [([30, 60, 60], [100, 250, 250])][m
[32m+[m[32m        boundaries = [([0, 100, 130], [60, 240, 240])][m
 [m
         # Convert threshold boundary colors to printable hex codes[m
         lbound = '#' + ''.join(map(hex, boundaries[0][0])).replace('0x', '')[m
[36m@@ -354,16 +358,29 @@[m [mclass ImageProcessor():[m
 [m
         err.success("Found width and height of sand: {}px by {}px"[m
                     .format(self.sand_dims.x, self.sand_dims.y))[m
[32m+[m[41m        [m
[32m+[m[32m        timeimg = np.empty((self.dims.x * self.dims.y * CHANNELS),[m
[32m+[m[32m                           dtype=np.uint8).reshape((self.dims.x, self.dims.y, CHANNELS))[m
[32m+[m[32m        timeimg.fill(255)[m
[32m+[m
[32m+[m[32m        cv2.putText(timeimg, timestr,[m
[32m+[m[32m                    (int(0.35 * self.dims.x), int(0.45 * self.dims.y)),[m
[32m+[m[32m                    cv2.FONT_HERSHEY_COMPLEX, 4, (0, 0, 0), 15)[m
[32m+[m
[32m+[m[32m        cv2.putText(timeimg, timestr,[m
[32m+[m[32m                    (int(0.35 * self.dims.x), int(0.45 * self.dims.y)),[m
[32m+[m[32m                    cv2.FONT_HERSHEY_COMPLEX, 4, (236, 236, 80), 6)[m
 [m
[31m-        # Reset the matplotlib axes' data, and redraw them[m
[32m+[m	[32m# Reset the matplotlib axes' data, and redraw them[m
         self.leftimg.set_data(img)[m
         self.rightimg.set_data(edgemap)[m
[32m+[m[32m        self.timeimg.set_data(timeimg)[m
         plt.draw()[m
         # This wait is necessary to allow the frames to update[m
         plt.pause(0.1)[m
 [m
         # Return true or false based on whether any sand was detected.[m
[31m-        if self.sand_dims.x <= 0 or self.sand_dims.y <= 0:[m
[32m+[m[32m        if self.sand_dims.x >= self.dims.x or self.sand_dims.y >= self.dims.y:[m
             return True[m
         return False[m
 [m
[1mdiff --git a/src/sanddial/servo.py b/src/sanddial/servo.py[m
[1mindex a99d5cc..a6a5665 100644[m
[1m--- a/src/sanddial/servo.py[m
[1m+++ b/src/sanddial/servo.py[m
[36m@@ -1,4 +1,5 @@[m
 import wiringpi[m
[32m+[m[32mfrom time import sleep[m
 [m
 GPIO_PIN = 18[m
 [m
[36m@@ -18,17 +19,20 @@[m [mclass Servo():[m
         wiringpi.pwmSetClock(192)[m
         wiringpi.pwmSetRange(2000)[m
 [m
[31m-        self.pulse = 100[m
[31m-        self.zero_pulse = 10[m
[31m-        self.reset_pulse = 102[m
[31m-        self.flipped_pulse = 195[m
[32m+[m[32m        self.pulse = 135[m
[32m+[m[32m        self.zero_pulse = 48[m
[32m+[m[32m        self.reset_pulse = 135[m
[32m+[m[32m        self.flipped_pulse = 225[m
         self.reset()[m
 [m
     def flip(self):[m
         if self.pulse > self.zero_pulse:[m
             wiringpi.pwmWrite(GPIO_PIN, self.zero_pulse)[m
[32m+[m[32m            self.pulse = self.zero_pulse[m
         elif self.pulse < self.flipped_pulse:[m
             wiringpi.pwmWrite(GPIO_PIN, self.flipped_pulse)[m
[32m+[m[32m            self.pulse = self.flipped_pulse[m
[32m+[m[32m        sleep(2)[m
 [m
     def reset(self):[m
         wiringpi.pwmWrite(GPIO_PIN, self.reset_pulse)[m
